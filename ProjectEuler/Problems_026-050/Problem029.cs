using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NumberTheory;

namespace ProjectEuler
{
    /// <summary>
    /// https://projecteuler.net/problem=29
    /// 
    /// 
    /// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    /// 
    /// 22=4, 23=8, 24=16, 25=32
    /// 32=9, 33=27, 34=81, 35=243
    /// 42=16, 43=64, 44=256, 45=1024
    /// 52=25, 53=125, 54=625, 55=3125
    /// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    /// 
    /// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    /// 
    /// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    /// </summary>
    public class Problem029 : EulerProblemBase
    {
        public Problem029() : base(29, "Distinct powers", 100, 9183) { }

        public override bool Test() => Solve(5) == 15;

        private class Number
        {
            public List<(ulong Factor, ulong Exponent)> Factors = new List<(ulong Factor, ulong Exponent)>();
            private ulong value = 0;

            public Number() { }
            public Number(IEnumerable<(ulong Factor, ulong Exponent)> f)
            {
                foreach (var fact in f)
                    Factors.Add(new (fact.Factor, fact.Exponent));
            }
            public ulong GetValue()
            {
                if (value == 0)
                {
                    value = 1;
                    foreach (var f in Factors)
                        value *= f.Factor.Power(f.Exponent);
                    return value;
                }
                else
                    return value;
            }

            public Number Power(Number exponent)
            {
                var result = new Number();
                ulong v = exponent.GetValue();
                foreach (var f in Factors)
                    result.Factors.Add(new (f.Factor, f.Exponent * v));
                return result;
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                foreach (var f in Factors)
                {
                    if (sb.Length != 0)
                        sb.Append("*");
                    sb.Append(f.Factor.ToString() + "^" + f.Exponent.ToString());
                }
                return sb.ToString();
            }
        }

        public override long Solve(long n)
        {
            var sieve = new SieveOfEratosthenes((ulong)Math.Max(30, n));
            var primes = sieve.GetPrimes().ToArray();

            var numbers = new List<Number>();
            for (long i = 2; i <= n; i++)
                numbers.Add(new Number(sieve.GetPrimeFactors((ulong)i, primes)));

            var numberTable = new HashSet<string>();
            foreach (var a in numbers)
                foreach (var b in numbers)
                {
                    var c = a.Power(b);
                    string s = c.ToString();
                    if (!numberTable.Contains(s))
                        numberTable.Add(s);
                }

            return numberTable.Count; 
        }
    }
}
