using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NumberTheory;

namespace ProjectEuler
{
    /// <summary>
    /// https://projecteuler.net/problem=45
    /// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    /// 
    /// Triangle Tn = n(n + 1) / 2     1, 3, 6, 10, 15, ...
    /// Pentagonal Pn = n(3n−1) / 2    1, 5, 12, 22, 35, ...
    /// Hexagonal Hn = n(2n−1)         1, 6, 15, 28, 45, ...
    /// It can be verified that T285 = P165 = H143 = 40755.
    /// 
    /// Find the next triangle number that is also pentagonal and hexagonal.
    /// </summary>
    public class Problem045 : EulerProblemBase
    {
        public Problem045() : base(45, "Triangular, pentagonal, and hexagonal", 0, 1533776805) { }

        public override long Solve(long n)
        {
            ulong i = 144;
            while (true)
            {
                ulong Hi = H(i++);
                if (IsPNumber(Hi))
                    return (long)Hi;
            }
        }
          
        private bool IsTNumber(ulong n)
        {
            double x = 0.5 * (Math.Sqrt(1 + 8 * n) - 1);
            return Math.Abs(x - (int)x) < 1e-8;
        }

        private bool IsPNumber(ulong n)
        {
            double x = 1.0/6 * (Math.Sqrt(1 + 24 * n) + 1);
            return Math.Abs(x - (int)x) < 1e-8;
        }

        private ulong T(ulong n) => n * (n + 1) / 2;
        private ulong P(ulong n) => n * (3 * n - 1) / 2;
        private ulong H(ulong n) => n * (2 * n - 1);

    }
    
}
